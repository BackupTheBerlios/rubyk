h1. call chain

h2. notein --> noteout

I tried to understand what happens in this simple patch:

This is what I have this far:
1. midi event arrives in ??? and @note_output@ is called (set by
@fts_midiport_add_listener@)
2. the message is parsed and @fts_outlet_int@ is called to set the 3 outlets
3. an "fts_atom" is created for each value and sent out with @outlet_atom@
4. the value is pushed through the list of connections into other objects:
4.1. get destination with @fts_connection_get_destination@
4.2. get input port number with @fts_connection_get_inlet@
4.3. get handler through @fts_class_get_input_handler@
(dest->input_handler). Finds ???


h1. osciallators (metro, osc)

h2. metro

My question was "how do you 'create' inputs ?"

# You set a callback with @fts_timebase_add_call@ in the timebase (@fts_get_timebase@) to call @metro_tick@ 'period' seconds from now.
# When @metro_tick@ is called, you register a new event in the timebase, and so on.

h1. timebase

When an event is inserted with @fts_timebase_add_call@:
# An entry is created on the ?heap?:Dynamic_memory_allocation
# It is inserted in the sorted queue with @timebase_insert_entry@
## A timebase_entry consits of (double time, *object, method, atom, *next)

h2. @fts_timebase_advance@

# moves the 'tick_time' forward 'step' (defined in throught @dsp_timebase_init@ = dsp_tick_duration)
# trigger all events with time < tick_time, setting 'logical time' to entry->time before trigger

h2. @fts_dsp_run_tick@

# advance timebase with @fts_timebase_advance@
# run DSP graph with @fts_graph_run@

h2. @audio_sched_run@

# for each audio port, call input function
## get input function (@fts_audioport_get_io_fun@)
## call the function with (port, inout buffer, tick_size)  (tick_size = vector_size = defined in @fts_kernel_dsp_init@ through @fts_dsp_graph_init@ = FTS_DSP_DEFAULT_TICK_SIZE = 64)
# for each audio port, clear output buffers
# call dsp with @fts_dsp_run_tick@
# for each audio port, call output function
# if no output port was called, @fts_sleep@

h2. @fts_kernel_dsp_init@

Defines the following:

# dsp_tick_duration = 1000.0 * (double)FTS_DSP_DEFAULT_TICK_SIZE / FTS_DSP_DEFAULT_SAMPLE_RATE;

h1. main

# @fts_init@
# @fts_sched_run@
## while(status != halt)
### for each callback send message @fts_s_sched_ready@ (method cached in callback->ready_meth) if flag set to FTS_SCHED_READ or FTS_SCHED_WRITE
### for each FTS_SCHED_ALWAYS callback send message @fts_s_sched_ready@ (method cached in callback->ready_meth)
# @fts_shutdown@