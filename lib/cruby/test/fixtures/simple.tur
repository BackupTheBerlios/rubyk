# simple state machine object script
INIT  x -> coco { 'a' }
# same as INIT  x -> coco { a }
# same as INIT  x -> coco 'a'
# same as INIT  x -> coco a
coco  ---> foo  { 'c' } # default move to 'foo', send 'c'
foo   x -> bar  {}      # on 'x' move to bar, send nothing
foo   y -> bar          # on 'y' move to bar, send nothing
foo   0 -> bar  { 0   } # on '0' move to bar, send '0'
# NOT the same as INIT  '0' -> coco '0'
bar   x -> baz  { 'b' }
baz   ---> INIT { 'd' }

=begin # comments from now on
Final :
# map a char to an int used in this machine
# default => 0
# 'x'     => 1
# 'y'     => 2
# '0'     => 3        0       x y
triggers = [0,0,...,0,3,...,0,1,2,0]
# map names to states
# INIT    => 0
# coco    => 1
# foo     => 2
# bar     => 3
# baz     => 4
goto_table = [ # first element is the default value. if an entry is '0' ==> use default value.
  [0,1,0,0], # from INIT (x = 1 => goto 1 = coco, other use default)
  [2,0,0,0], # from coco (use default)
  [2,3,3,3], # from foo (all except default, move to bar = 3)
  [3,4,3,3], # from bar ('x' = 1 => goto baz = 4, rest = stay in bar = 3)
  [0,0,0,0], # whatever happens, use default
  ]
  
send_table = [ # first element is the default value. if an entry is '0' ==> use default value.
  [ 0 ,'a', 0 , 0 ], # on 'x', send 'a', default: send nothing
  ['c', 0 , 0 , 0 ], # whatever happens send 'c'
  [ 0 , 0 , 0 ,'0'], # on '0', send '0',  default: send nothing
  [ 0 ,'b', 0 , 0 ], # on 'x', send 'b', default: send nothing
  ['d', 0 , 0 , 0 ], # whatever happens, send 'd'
  ]


if (send = send_table[current_state][token])
  ; // ok custom value
else
  send = send_table[current_state][0]; // use default
  
if (state = goto_table[current_state][token])
  current_state = state;
else
  current_state = goto_table[current_state][0]; // use default

                                                 # token array
SIZE = 2 * ( (token_count + 1) * state_count ) + 256
=end